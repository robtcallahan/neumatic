#
# ks_template_ultradns.cfg
#

authconfig --enableshadow --passalgo=sha512
text
firewall --disable
firstboot --disable
keyboard us
lang en_US
url --url=__ISO_URL__
network --bootproto=static --ip=__IPADDRESS__ --netmask=__NETMASK__ --gateway=__GATEWAY__ --nameserver=__NAMESERVER__ --hostname=__HOSTNAME__ --device=eth0 --onboot=on

clearpart --all --initlabel
zerombr
#bootloader --location=mbr --driveorder=sda --append="crashkernel=auto rhgb quiet audit=1"
bootloader --location=mbr --driveorder=sda --append="crashkernel=auto audit=1"
ignoredisk --only-use=sda
part /boot --size=1024 --ondisk=sda --asprimary

# Create physical volume
part pv.01 --size=1 --ondisk=sda --grow

# Create the volume group
volgroup rootvg pv.01
logvol /    --vgname=rootvg --size=8192 --name=lvroot
logvol /home --vgname=rootvg --size=4096 --name=lvhome
logvol /tmp --vgname=rootvg --size=8192 --name=lvtmp
logvol /var --vgname=rootvg --size=30720 --name=lvvar
logvol /var/named --vgname=rootvg --size=30720 --name=lvnamed
logvol swap --vgname=rootvg --recommended --name=swap --fstype=swap
ignoredisk --only-use=sda


reboot --eject
rootpw --iscrypted $1$syFyntHs$MPCOrWjDSzo47tXfjaVUW.
selinux --disabled
skipx
timezone --utc GMT
install
key --skip

#------------------------------- Packages -----------------------------------
%packages  --ignoremissing  --nobase
acl
attr
audit
authconfig
basesystem
bash
bind-utils
coreutils
cpio
cronie
dhclient
e2fsprogs
filesystem
glibc
initscripts
iproute
iptables
iptables-ipv6
iputils
kbd
ncurses
openssh-server
openssh-clients
passwd
policycoreutils
procps
rhnsd
rootfiles
rpm
rsyslog
setup
shadow-utils
sudo
util-linux-ng
vim-minimal
yum
efibootmgr
grub
postfix
dracut-fips
dracut-network
openssh-server
openssh
wget
curl
rpm
yum
ntp
ntpdate
bash
ksh
gawk
which
mlocate
chkconfig
dmidecode
ethtool
vixie-cron
sysstat
sosreport
tcpdump
telnet
lsof
rsync
%end

#------------------------------- Pre Install -----------------------------------
#%pre
#!/bin/bash
# Once root's homedir is there, copy over the log.
#sleep 10
#while : ; do
#    if [ -d /mnt/sysimage/root ]; then
#        cp /tmp/ks-pre.log /mnt/sysimage/root/
#        logger "Copied %pre section log to system"
#        break
#    fi
#done &
#%end


#------------------------------- Post Install -----------------------------------
%post --log=/root/ks-post.log

set -x -v
#exec 1>/root/ks-post.log 2>&1

# Start post_install_network_config generated code
# create a working directory for interface scripts
mkdir /etc/sysconfig/network-scripts/cobbler
cp /etc/sysconfig/network-scripts/ifcfg-lo /etc/sysconfig/network-scripts/cobbler/

# set the gateway in the network configuration file
grep -v GATEWAY /etc/sysconfig/network > /etc/sysconfig/network.cobbler
echo "GATEWAY=__GATEWAY__" >> /etc/sysconfig/network.cobbler
rm -f /etc/sysconfig/network
mv /etc/sysconfig/network.cobbler /etc/sysconfig/network

# set the hostname in the network configuration file
grep -v HOSTNAME /etc/sysconfig/network > /etc/sysconfig/network.cobbler
echo "HOSTNAME=__HOSTNAME__" >> /etc/sysconfig/network.cobbler
rm -f /etc/sysconfig/network
mv /etc/sysconfig/network.cobbler /etc/sysconfig/network

# Also set the hostname now, some applications require it
# (e.g.: if we're connecting to Puppet before a reboot).
/bin/hostname __HOSTNAME__

# Start configuration for eth0
echo "DEVICE=eth0" > /etc/sysconfig/network-scripts/cobbler/ifcfg-eth0
echo "ONBOOT=yes" >> /etc/sysconfig/network-scripts/cobbler/ifcfg-eth0
echo "TYPE=Ethernet" >> /etc/sysconfig/network-scripts/cobbler/ifcfg-eth0
# WARNING! Configuring interfaces by their names only
#          is error-prone, and can cause issues if and when
#          the kernel gives an interface a different name
#          following a reboot/hardware changes.
echo "BOOTPROTO=static" >> /etc/sysconfig/network-scripts/cobbler/ifcfg-eth0
echo "IPADDR=__IPADDRESS__" >> /etc/sysconfig/network-scripts/cobbler/ifcfg-eth0
echo "NETMASK=__NETMASK__" >> /etc/sysconfig/network-scripts/cobbler/ifcfg-eth0
# End configuration for eth0

sed -i -e "/^search /d" /etc/resolv.conf
echo -n "search " >>/etc/resolv.conf
echo -n "ultradns.net " >>/etc/resolv.conf
echo -n "va.neustar.com " >>/etc/resolv.conf
echo -n "neustar.com " >>/etc/resolv.conf
echo "" >>/etc/resolv.conf

sed -i -e "/^nameserver /d" /etc/resolv.conf
echo "nameserver __NAMESERVER__" >>/etc/resolv.conf

rm -f /etc/sysconfig/network-scripts/ifcfg-*
mv /etc/sysconfig/network-scripts/cobbler/* /etc/sysconfig/network-scripts/
rm -r /etc/sysconfig/network-scripts/cobbler
if [ -f "/etc/modprobe.conf" ]; then
    cat /etc/modprobe.conf.cobbler >> /etc/modprobe.conf
    rm -f /etc/modprobe.conf.cobbler
fi
# End post_install_network_config generated code

# Start download cobbler managed config files (if applicable)
# End download cobbler managed config files (if applicable)

if [[ -e /dev/vda || -e /dev/hda || -e /dev/xvda ]]
then
  local_drive="true"
fi

HWMANUFACTURER=`dmidecode | grep Manufacturer | head -1 | grep HP`
OS_RELEASE=`cat /etc/redhat-release | sed s/.*release\ // | awk -F "." '{print $1}'`
DONTINSTALL="no"


OS_RELEASE= `cat /etc/redhat-release | awk -F . '{print $1}' | awk '{print $1}'`


if [[ "$OS_RELEASE" =~ "Red" ]]
     then
        rpm -e subscription-manager
     else
        echo "Unknown OS"
fi
yum clean all

OS_RELEASE=`cat /etc/redhat-release | sed s/.*release\ // | awk -F "." '{print $1}'`

if [[ "$OS_RELEASE" == "6" ]]
then
   if [[ -e /dev/sda1 ]]
   then
       BOOTDISK_ID=`/sbin/blkid /dev/sda1  | awk '{print $2}'`
       FSTABBOOT_OLD=`cat /etc/fstab | grep "/boot" | awk '{print $1}'`
       sed -i.bak "s#$FSTABBOOT_OLD#$BOOTDISK_ID#g" /etc/fstab
   fi
else
	if [[ -e /dev/sda1 ]]
	then
	    BOOTDISK_ID=`/sbin/blkid /dev/sda1  | awk '{print $3}'`
	    FSTABBOOT_OLD=`cat /etc/fstab | grep "/boot" | awk '{print $1}'`
	    sed -i.bak "s#$FSTABBOOT_OLD#$BOOTDISK_ID#g" /etc/fstab
	fi
fi

# update the menu.lst file so the boot is non-graphical
if [[ -e /boot/grub/grub.conf ]]
then
    sed -i "/kernel/s/rhgb/vga=normal/" /boot/grub/grub.conf
    sed -i "/kernel/s/quiet/nomodeset 3/" /boot/grub/grub.conf
fi

## https://access.redhat.com/solutions/1237153 
## makesure selinux is disabled
sed -i -e 's/\(^SELINUX=\)enforcing$/\1disabled/' /etc/selinux/config
#sed -i s/SELINUX=enforcing/SELINUX=disabled/g /etc/selinux/config

# remove CentOS-Media.repo file
rm -f /etc/yum.repos.d/CentOS-Media.repo


# install the chef-client
#/usr/bin/curl -L https://www.chef.io/chef/install.sh | bash -s -- -v 11.16.2-1
/usr/bin/curl --silent --show-error --insecure --location https://www.chef.io/chef/install.sh | bash -s -- -v 12.0.3-1

mkdir -p /etc/chef/trusted_certs
mkdir /var/log/chef

# /etc/chef/validation.pem
cat << EOF > /etc/chef/validation.pem
__VALIDATION_PEM__
EOF

# /etc/chef/client.rb
cat << EOF > /etc/chef/client.rb
___CLIENT_RB__
EOF

# /etc/chef/trusted_certs/server.crt
cat << EOF > /etc/chef/trusted_certs/server.crt
__SERVER_CRT__
EOF

# Update rc.local to run the chef client
cat << EOF >> /etc/rc.d/rc.local

ntpdate us.pool.ntp.org
chef-client -E __CHEF_ENVIRONMENT__ -j /etc/chef/first-boot.json

EOF

# creat the first-boot.json file for the first chef client run
echo '{ "run_list":["role[__CHEF_ROLE__]"]}' | cat > /etc/chef/first-boot.json


%end
